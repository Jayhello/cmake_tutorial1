/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef search_id_TYPES_H
#define search_id_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Thrift_Example {

class Response;

class InvalidId;

typedef struct _Response__isset {
  _Response__isset() : id(false), name(false) {}
  bool id :1;
  bool name :1;
} _Response__isset;

class Response : public virtual ::apache::thrift::TBase {
 public:

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : id(0), name() {
  }

  virtual ~Response() throw();
  int32_t id;
  std::string name;

  _Response__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const Response & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Response &a, Response &b);

std::ostream& operator<<(std::ostream& out, const Response& obj);

typedef struct _InvalidId__isset {
  _InvalidId__isset() : id(false), why(false) {}
  bool id :1;
  bool why :1;
} _InvalidId__isset;

class InvalidId : public ::apache::thrift::TException {
 public:

  InvalidId(const InvalidId&);
  InvalidId& operator=(const InvalidId&);
  InvalidId() : id(0), why() {
  }

  virtual ~InvalidId() throw();
  int32_t id;
  std::string why;

  _InvalidId__isset __isset;

  void __set_id(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidId & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidId &a, InvalidId &b);

std::ostream& operator<<(std::ostream& out, const InvalidId& obj);

} // namespace

#endif
